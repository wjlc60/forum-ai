{"version":3,"sources":["../../src/grades/expandconversation.js"],"names":["findGradableNode","node","closest","ForumSelectors","expandConversation","showPostInContext","rootNode","postId","dataset","postid","discussionId","discussionid","discussionName","name","Promise","all","Repository","getDiscussionPosts","parseInt","Modal","create","title","large","type","types","CANCEL","allPosts","modal","userPosts","posts","map","post","subject","readonly","html","rating","getRoot","on","ModalEvents","hidden","destroy","show","templatePromise","Templates","render","setBody","then","relevantPost","querySelector","scrollIntoView","behavior","registerEventListeners","addEventListener","e","target","preventDefault","err"],"mappings":"0SAuBA,OACA,OAEA,OACA,OACA,O,4lCAQMA,CAAAA,CAAgB,CAAG,SAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACC,OAAL,CAAaC,CAAc,CAACC,kBAA5B,CAAJ,C,CAOvBC,CAAiB,4CAAG,WAAMC,CAAN,yGAChBC,CADgB,CACPD,CAAQ,CAACE,OAAT,CAAiBC,MADV,CAEhBC,CAFgB,CAEDJ,CAAQ,CAACE,OAAT,CAAiBG,YAFhB,CAGhBC,CAHgB,CAGCN,CAAQ,CAACE,OAAT,CAAiBK,IAHlB,gBAQZC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAClBC,UAAWC,kBAAX,CAA8BC,QAAQ,CAACR,CAAD,CAAtC,CADkB,CAElBS,CAAK,CAACC,MAAN,CAAa,CACTC,KAAK,CAAET,CADE,CAETU,KAAK,GAFI,CAGTC,IAAI,CAAEJ,CAAK,CAACK,KAAN,CAAYC,MAHT,CAAb,CAFkB,CAAZ,CARY,0BAMlBC,CANkB,MAOlBC,CAPkB,MAiBhBC,CAjBgB,CAiBJF,CAAQ,CAACG,KAAT,CAAeC,GAAf,CAAmB,SAACC,CAAD,CAAU,CAC3CA,CAAI,CAACC,OAAL,CAAe,IAAf,CACAD,CAAI,CAACE,QAAL,IACAF,CAAI,CAACG,IAAL,CAAUC,MAAV,CAAmB,IAAnB,CAEA,MAAOJ,CAAAA,CACV,CANiB,CAjBI,CA0BtBJ,CAAK,CAACS,OAAN,GAAgBC,EAAhB,CAAmBC,CAAW,CAACC,MAA/B,CAAuC,UAAW,CAE9CZ,CAAK,CAACa,OAAN,EACH,CAHD,EAKAb,CAAK,CAACc,IAAN,GAGMC,CAlCgB,CAkCEC,UAAUC,MAAV,CAAiB,+CAAjB,CAAkEhB,CAAlE,CAlCF,CAmCtBD,CAAK,CAACkB,OAAN,CAAcH,CAAd,EAEAA,CAAe,CAACI,IAAhB,CAAqB,UAAM,CACvB,GAAMC,CAAAA,CAAY,CAAGpB,CAAK,CAACS,OAAN,GAAgB,CAAhB,EAAmBY,aAAnB,aAAsCzC,CAAtC,EAArB,CACA,GAAIwC,CAAJ,CAAkB,CACdA,CAAY,CAACE,cAAb,CAA4B,CAACC,QAAQ,CAAE,QAAX,CAA5B,CACH,CAED,MACH,CAPD,EArCsB,yCAAH,uD,0BAoDe,QAAzBC,CAAAA,sBAAyB,CAAC7C,CAAD,CAAc,CAChDA,CAAQ,CAAC8C,gBAAT,CAA0B,OAA1B,CAAmC,SAACC,CAAD,CAAO,CACtC,GAAM/C,CAAAA,CAAQ,CAAGN,CAAgB,CAACqD,CAAC,CAACC,MAAH,CAAjC,CAEA,GAAIhD,CAAJ,CAAc,CACV+C,CAAC,CAACE,cAAF,GAEA,GAAI,CACAlD,CAAiB,CAACC,CAAD,CACpB,CAAC,MAAOkD,CAAP,CAAY,CACV,gBAAcA,CAAd,CACH,CACJ,CACJ,CAZD,CAaH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the creation of a Modal that shows the user's post in context of the entire discussion.\n *\n * @module     mod_forum/grades/expandconversation\n * @package    mod_forum\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as ForumSelectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport {exception as showException} from \"core/notification\";\nimport Templates from 'core/templates';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\n\n/**\n * Find the Node containing the gradable details from the provided node by searching up the tree.\n *\n * @param {HTMLElement} node\n * @returns {HTMLElement}\n */\nconst findGradableNode = node => node.closest(ForumSelectors.expandConversation);\n\n/**\n * Show the post in context in a modal.\n *\n * @param {HTMLElement} rootNode The button that has been clicked\n */\nconst showPostInContext = async(rootNode) => {\n    const postId = rootNode.dataset.postid;\n    const discussionId = rootNode.dataset.discussionid;\n    const discussionName = rootNode.dataset.name;\n\n    const [\n        allPosts,\n        modal,\n    ] = await Promise.all([\n        Repository.getDiscussionPosts(parseInt(discussionId)),\n        Modal.create({\n            title: discussionName,\n            large: true,\n            type: Modal.types.CANCEL\n        }),\n    ]);\n\n    const userPosts = allPosts.posts.map((post) => {\n        post.subject = null;\n        post.readonly = true;\n        post.html.rating = null;\n\n        return post;\n    });\n\n    // Handle hidden event.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Destroy when hidden.\n        modal.destroy();\n    });\n\n    modal.show();\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const templatePromise = Templates.render('mod_forum/grades/grader/discussion/post_modal', userPosts);\n    modal.setBody(templatePromise);\n    // eslint-disable-next-line promise/catch-or-return\n    templatePromise.then(() => {\n        const relevantPost = modal.getRoot()[0].querySelector(`#p${postId}`);\n        if (relevantPost) {\n            relevantPost.scrollIntoView({behavior: \"smooth\"});\n        }\n\n        return;\n    });\n};\n\n/**\n * Register event listeners for the expand conversations button.\n *\n * @param {HTMLElement} rootNode The root to listen to.\n */\nexport const registerEventListeners = (rootNode) => {\n    rootNode.addEventListener('click', (e) => {\n        const rootNode = findGradableNode(e.target);\n\n        if (rootNode) {\n            e.preventDefault();\n\n            try {\n                showPostInContext(rootNode);\n            } catch (err) {\n                showException(err);\n            }\n        }\n    });\n};\n"],"file":"expandconversation.min.js"}
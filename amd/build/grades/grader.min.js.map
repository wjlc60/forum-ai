{"version":3,"sources":["../../src/grades/grader.js"],"names":["templateNames","contentRegion","getContentForUserIdFunction","cmid","userid","Repository","getDiscussionByUserID","then","context","discussions","map","discussionPostMapper","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","subject","readonly","starter","parentid","parent","get","html","rating","name","launchWholeForumGrading","rootNode","data","dataset","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","gradingPanelFunctions","group","launch","getter","setter","groupid","initialUserId","initialuserid","moduleName","registerLaunchListeners","document","addEventListener","e","target","matches","Error","gradableItems","wholeForum","preventDefault"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @package    mod_forum\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.subject = null;\n        post.readonly = true;\n        post.starter = !post.parentid;\n        post.parent = parentMap.get(post.parentid);\n        post.html.rating = null;\n\n        return post;\n    });\n\n    return {\n        id: discussion.id,\n        name: discussion.name,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nconst launchWholeForumGrading = async(rootNode) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID),\n        getContentForUserIdFunction(data.cmid),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode);\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"file":"grader.min.js"}
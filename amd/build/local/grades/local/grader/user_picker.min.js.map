{"version":3,"sources":["../../../../../src/local/grades/local/grader/user_picker.js"],"names":["UserPicker","userList","initialUserId","showUserCallback","preChangeUserCallback","render","currentUserIndex","findIndex","user","id","parseInt","bind","root","document","createElement","renderNavigator","html","js","Templates","replaceNodeContents","showUser","currentUser","registerEventListeners","renderForPromise","context","Promise","all","renderUserChange","userRegion","querySelector","Selectors","regions","addEventListener","e","button","target","closest","actions","changeUser","updateIndex","dataset","direction","length","total","displayIndex","users","currentUserID","userPicker"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/local/grades/local/grader/user_picker\n * @package    mod_forum\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Selectors from './user_picker/selectors';\n\nconst templatePath = 'mod_forum/local/grades/local/grader';\n\nclass UserPicker {\n\n    /**\n     * Constructor for the User Picker.\n     *\n     * @param {Array} userList List of users\n     * @param {Number} initialUserId The ID of the initial user to display\n     * @param {Function} showUserCallback The callback used to display the user\n     * @param {Function} preChangeUserCallback The callback to use before changing user\n     * @param {Bool} render Whether to render on instantiation\n     */\n    constructor(userList, initialUserId, showUserCallback, preChangeUserCallback, render = true) {\n        this.userList = userList;\n        this.showUserCallback = showUserCallback;\n        this.preChangeUserCallback = preChangeUserCallback;\n\n        // Determine the current index.\n        this.currentUserIndex = userList.findIndex(user => {\n            return user.id === parseInt(initialUserId);\n        });\n\n        // Ensure that render is bound correctly.\n        this.render = this.render.bind(this);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    /**\n     * Render the user picker.\n     */\n    async render() {\n        // Create the root node.\n        this.root = document.createElement('div');\n\n        const {html, js} = await this.renderNavigator();\n        Templates.replaceNodeContents(this.root, html, js);\n\n        // Call the showUser function to show the first user immediately.\n        await this.showUser(this.currentUser);\n\n        // Ensure that the event listeners are all bound.\n        this.registerEventListeners();\n    }\n\n    /**\n     * Render the navigator itself.\n     *\n     * @returns {Promise}\n     */\n    renderNavigator() {\n        return Templates.renderForPromise(`${templatePath}/user_picker`, {});\n    }\n\n    /**\n     * Render the current user details for the picker.\n     *\n     * @param {Object} context The data used to render the user picker.\n     * @returns {Promise}\n     */\n    renderUserChange(context) {\n        return Templates.renderForPromise(`${templatePath}/user_picker/user`, context);\n    }\n\n    /**\n     * Show the specified user in the picker.\n     *\n     * @param {Object} user\n     */\n    async showUser(user) {\n        const [{html, js}] = await Promise.all([this.renderUserChange(user), this.showUserCallback(user)]);\n        const userRegion = this.root.querySelector(Selectors.regions.userRegion);\n        Templates.replaceNodeContents(userRegion, html, js);\n    }\n\n    /**\n     * Register the event listeners for the user picker.\n     */\n    registerEventListeners() {\n        this.root.addEventListener('click', (e) => {\n            const button = e.target.closest(Selectors.actions.changeUser);\n            if (button) {\n                this.preChangeUserCallback(this.currentUser);\n                this.updateIndex(parseInt(button.dataset.direction));\n                this.showUser(this.currentUser);\n            }\n        });\n    }\n\n    /**\n     * Update the current user index.\n     *\n     * @param {Number} direction\n     * @returns {Number}}\n     */\n    updateIndex(direction) {\n        this.currentUserIndex += direction;\n\n        // Loop around the edges.\n        if (this.currentUserIndex < 0) {\n            this.currentUserIndex = this.userList.length - 1;\n        } else if (this.currentUserIndex > this.userList.length - 1) {\n            this.currentUserIndex = 0;\n        }\n\n        return this.currentUserIndex;\n    }\n\n    /**\n     * Get the details of the user currently shown with the total number of users, and the 1-indexed count of the\n     * current user.\n     *\n     * @returns {Object}\n     */\n    get currentUser() {\n        return {\n            ...this.userList[this.currentUserIndex],\n            total: this.userList.length,\n            displayIndex: this.currentUserIndex + 1,\n        };\n    }\n\n    /**\n     * Get the root node for the User Picker.\n     *\n     * @returns {HTMLElement}\n     */\n    get rootNode() {\n        return this.root;\n    }\n}\n\n/**\n * Create a new user picker.\n *\n * @param {Array} users The list of users\n * @param {Number} currentUserID The userid of the current user\n * @param {Function} showUserCallback The function to call to show a specific user\n * @param {Function} preChangeUserCallback The fucntion to call to save the grade for the current user\n * @returns {UserPicker}\n */\nexport default async(users, currentUserID, showUserCallback, preChangeUserCallback) => {\n    const userPicker = new UserPicker(users, currentUserID, showUserCallback, preChangeUserCallback, false);\n    await userPicker.render();\n\n    return userPicker;\n};\n"],"file":"user_picker.min.js"}